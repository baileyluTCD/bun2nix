# This file was autogenerated by `bun2nix`, editing it is not recommended.
# Consume it with `callPackage` in your actual derivation -> https://nixos-and-flakes.thiscute.world/nixpkgs/callpackage
{
  lib,
  fetchurl,
  gnutar,
  coreutils,
  runCommand,
  symlinkJoin,
  bun,
}: let
  # Set of Bun packages to install
  packages = {
    "@types/bun" = fetchurl {
      name = "@types/bun@1.2.4";
      url = "https://registry.npmjs.org/@types/bun/-/bun-1.2.4.tgz";
      hash = "sha256-O01ctlMKEB5nmokJir6UwrPEPWaW9zhiqS0YkwPVX9Y=";
    };
    "@types/node" = fetchurl {
      name = "@types/node@22.13.5";
      url = "https://registry.npmjs.org/@types/node/-/node-22.13.5.tgz";
      hash = "sha256-jtFd0kKkgHHRYLsT8YUk7PgWSyu0nVwrUHm+IMzNRKQ=";
    };
    "@types/ws" = fetchurl {
      name = "@types/ws@8.5.14";
      url = "https://registry.npmjs.org/@types/ws/-/ws-8.5.14.tgz";
      hash = "sha256-SsUn5egoHI/5PcxHQwwtNupaBcwgePqjR3uTG7Ew37w=";
    };
    "bun-types" = fetchurl {
      name = "bun-types@1.2.4";
      url = "https://registry.npmjs.org/bun-types/-/bun-types-1.2.4.tgz";
      hash = "sha256-lXqzNu+EFE1bzON4rLGrSdws76vuyStC1Ehxa3n/6/0=";
    };
    "typescript" = fetchurl {
      name = "typescript@5.7.3";
      url = "https://registry.npmjs.org/typescript/-/typescript-5.7.3.tgz";
      hash = "sha256-gM/KElS6uOgdY5F45C1kBthW+6bjTK1g0atQ7m5ffrs=";
    };
    "undici-types" = fetchurl {
      name = "undici-types@6.20.0";
      url = "https://registry.npmjs.org/undici-types/-/undici-types-6.20.0.tgz";
      hash = "sha256-coyp/P9nY3Lk3NZIteJvu9sonsK89nXnYBzCE0pejW4=";
    };
  };

  # List of binary symlinks to create in the `node_modules/.bin` folder
  binaries = {
    "tsc" = "../typescript/bin/tsc";
    "tsserver" = "../typescript/bin/tsserver";
  };

  # Normalize a package path
  normalizePath = name:
    if lib.hasPrefix "@" name
    then name
    else if !lib.hasInfix "/" name
    then name
    else let
      parts = lib.strings.splitString "/" name;
      joiner = builtins.concatStringsSep "/node_modules/";
    in
      joiner parts;

  # Extract a package from a tar file
  extractPackage = name: pkg: let
    targetPath = normalizePath name;
  in
    runCommand "bun2nix-extract-${name}" {buildInputs = [gnutar coreutils];} ''
      echo ${targetPath}

      # Extract the npm download into the correctly resolved path based on the package name
      mkdir -p $out/${targetPath}
      tar -xzf ${pkg} -C $out/${targetPath} --strip-components=1

      # Patch any binaries in the package
      mkdir -p $out/bin
      ln -s ${bun}/bin/bun $out/bin/node
      PATH=$out/bin:$PATH patchShebangs $out/${targetPath}
      patchShebangs $out/${targetPath}
    '';

  # Link a binary from a package
  linkBin = name: dest:
    runCommand "bun2nix-binary-${name}" {} ''
      mkdir -p $out

      ln -sn ${dest} $out/${name}
    '';

  # Construct the .bin directory
  dotBinDir = symlinkJoin {
    name = ".bin";
    paths = lib.mapAttrsToList linkBin binaries;
  };

  # Link the packages to inject into node_modules
  packageFiles = symlinkJoin {
    name = "package-files";
    paths = lib.mapAttrsToList extractPackage packages;
  };

  # Build the node modules directory
  nodeModules = runCommand "node-modules" {} ''
    mkdir -p $out

    # Packages need to be regular folders
    cp -rL ${packageFiles}/* $out/

    # Executables need to be symlinks
    cp -r ${dotBinDir} $out/.bin
  '';
in {
  inherit nodeModules packages dotBinDir binaries;
}
