use serde::{Deserialize, Serialize};

#[derive(Default, Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
/// # Prefetch Output
///
/// A model of the results returned by `nix flake prefetch <url> --json`
pub struct PrefetchOutput {
    hash: String,
    locked: Lock,
    original: Original,
    store_path: String,
}

#[derive(Default, Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Lock {
    last_modified: u32,
    nar_hash: String,
    #[serde(rename = "type")]
    flake_type: String,
    url: String,
}

#[derive(Default, Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Original {
    #[serde(rename = "type")]
    flake_type: String,
    url: String,
}

/// # Nix Expression Conversion Trait
///
/// Implemented by anything that can be turned into a nix expression
pub trait DumpNixExpression {
    /// # Dump Nix Experession
    ///
    /// Dumps `self` into a nix expression
    fn dump_nix_expression(&self) -> String;
}

impl DumpNixExpression for PrefetchOutput {
    fn dump_nix_expression(&self) -> String {
        format!(
"    {{
        name = \"{}\";
        path = fetchurl {{
            name = \"{}\";
            url  = \"{}\";
            sha1 = \"{}\";
        }};
    }}",
            self.original.url, self.original.url, self.original.url, self.hash
        )
    }
}

impl DumpNixExpression for Vec<PrefetchOutput> {
    fn dump_nix_expression(&self) -> String {
        let packages_section = self
            .iter()
            .map(|p| p.dump_nix_expression())
            .reduce(|acc, e| acc + "\n" + &e)
            .unwrap_or_default();

        format!(
"# This file was autogenerated by `bun2nix`, editing it is not recommended.
# Consume it with `callPackage` in your actual derivation -> https://nixos-and-flakes.thiscute.world/nixpkgs/callpackage
{{ fetchurl, fetchgit, linkFarm, runCommand, gnutar }}: rec {{
  offline_cache = linkFarm \"offline\" packages;
  packages = [
{}
  ];
}}",
    packages_section)
    }
}

#[test]
fn test_dump_nix_expression_file_single() {
    let output = PrefetchOutput {
        hash: "0294eb3dee05028d31ee1a5fa2c556a6aaf10a1b".to_owned(),
        original: Original {
            url: "https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz".to_owned(),
            ..Default::default()
        },
        ..Default::default()
    };

    let expected = 
"    {
        name = \"https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz\";
        path = fetchurl {
            name = \"https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz\";
            url  = \"https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz\";
            sha1 = \"0294eb3dee05028d31ee1a5fa2c556a6aaf10a1b\";
        };
    }";

    assert_eq!(expected.trim(), output.dump_nix_expression().trim());
}

#[test]
fn test_dump_nix_expression_file_vec() {
    let out = vec![
        PrefetchOutput {
            hash: "0294eb3dee05028d31ee1a5fa2c556a6aaf10a1b".to_owned(),
            original: Original {
                url: "https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz".to_owned(),
                ..Default::default()
            },
            ..Default::default()
        },
        PrefetchOutput {
            hash: "0294eb3dee05028d31ee1a5fa2c556a6aaf10a1b".to_owned(),
            original: Original {
                url: "https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz".to_owned(),
                ..Default::default()
            },
            ..Default::default()
        },
    ];

    let expected = 
"# This file was autogenerated by `bun2nix`, editing it is not recommended.
# Consume it with `callPackage` in your actual derivation -> https://nixos-and-flakes.thiscute.world/nixpkgs/callpackage
{ fetchurl, fetchgit, linkFarm, runCommand, gnutar }: rec {
  offline_cache = linkFarm \"offline\" packages;
  packages = [
    {
        name = \"https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz\";
        path = fetchurl {
            name = \"https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz\";
            url  = \"https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz\";
            sha1 = \"0294eb3dee05028d31ee1a5fa2c556a6aaf10a1b\";
        };
    }
    {
        name = \"https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz\";
        path = fetchurl {
            name = \"https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz\";
            url  = \"https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz\";
            sha1 = \"0294eb3dee05028d31ee1a5fa2c556a6aaf10a1b\";
        };
    }
  ];
}";

    assert_eq!(expected.trim(), out.dump_nix_expression().trim());
}
