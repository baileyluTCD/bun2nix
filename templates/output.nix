# This file was autogenerated by `bun2nix`, editing it is not recommended.
# Consume it with `callPackage` in your actual derivation -> https://nixos-and-flakes.thiscute.world/nixpkgs/callpackage
{
  lib,
  fetchurl,
  gnutar,
  coreutils,
  runCommand,
  symlinkJoin,
  bun,
}: let
  # Bun packages to install
  packages = {
    {%- for pkg in packages %}
    "{{ pkg.name }}" = fetchurl {
      name = "{{ pkg.npm_identifier }}";
      url = "{{ pkg.data.url }}";
      hash = "{{ pkg.data.hash }}";
    };
    {%- endfor %}
  };

  # Extract a package from a tar file
  extractPackage = name: pkg:
    runCommand "bun2nix-extract-${name}" {buildInputs = [gnutar coreutils];} ''
      # Extract the files from npm
      mkdir -p $out/${name}
      tar -xzf ${pkg.path} -C $out/${name} --strip-components=1

      # Patch binary shebangs to point to bun
      mkdir -p $out/bin
      ln -s ${bun}/bin/bun $out/bin/node
      PATH=$out/bin:$PATH patchShebangs $out/${name}
      patchShebangs $out/${name}
    '';

  # List of binary symlinks to create in the `node_modules/.bin` folder
  binaries = {
    {%- for bin in binaries %}
    "{{ bin.name }}" = "{{ bin.location }}";
    {%- endfor %}
  };

  # Link a binary from a package
  linkBin = name: dest:
    runCommand "bun2nix-binary-${name}" {} ''
      mkdir -p $out

      ln -sn ${dest} $out/${name}
    '';

  # Construct the .bin directory
  dotBinDir = symlinkJoin {
    name = ".bin";
    paths = lib.mapAttrsToList linkBin binaries;
  };

  # Link the packages to inject into node_modules
  packageFiles = symlinkJoin {
    name = "package-files";
    paths = lib.mapAttrsToList extractPackage packages;
  };

  # Build the node modules directory
  nodeModules = runCommand "node-modules" {} ''
    mkdir -p $out

    # Packages need to be regular folders
    cp -rL ${packageFiles}/* $out/

    # Executables need to be symlinks
    cp -r ${dotBinDir} $out/.bin
  '';
in {
  inherit nodeModules packages dotBinDir binaries;
}

